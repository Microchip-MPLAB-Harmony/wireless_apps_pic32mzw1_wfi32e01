var SearchFiles = ["GUID-60AE2339-6045-4BAA-AEBC-AAEE24D8C566.html",
							"GUID-60AE2339-6045-4BAA-AEBC-AAEE24D8C566.html",
							"GUID-60AE2339-6045-4BAA-AEBC-AAEE24D8C566.html",
							"GUID-20C8A60E-F767-4756-9B58-9DB322426EB5.html",
							"GUID-20C8A60E-F767-4756-9B58-9DB322426EB5.html",
							"GUID-20C8A60E-F767-4756-9B58-9DB322426EB5.html",
							"GUID-20C8A60E-F767-4756-9B58-9DB322426EB5.html",
							"GUID-20C8A60E-F767-4756-9B58-9DB322426EB5.html",
							"GUID-762D351F-B3C9-4D90-A833-047AB8C62546.html",
							"GUID-762D351F-B3C9-4D90-A833-047AB8C62546.html",
							"GUID-762D351F-B3C9-4D90-A833-047AB8C62546.html",
							"GUID-762D351F-B3C9-4D90-A833-047AB8C62546.html",
							"GUID-762D351F-B3C9-4D90-A833-047AB8C62546.html",
							"GUID-762D351F-B3C9-4D90-A833-047AB8C62546.html",
							"GUID-762D351F-B3C9-4D90-A833-047AB8C62546.html",
							"GUID-762D351F-B3C9-4D90-A833-047AB8C62546.html",
							"GUID-762D351F-B3C9-4D90-A833-047AB8C62546.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-74FBC25B-9FC7-4084-895C-CFF3557AFED7.html",
							"GUID-9E856A96-A839-48E3-A836-DB540A6DAD5F.html",
							"GUID-9E856A96-A839-48E3-A836-DB540A6DAD5F.html",
							"GUID-9E856A96-A839-48E3-A836-DB540A6DAD5F.html",
							"GUID-9E856A96-A839-48E3-A836-DB540A6DAD5F.html",
							"GUID-9E856A96-A839-48E3-A836-DB540A6DAD5F.html",
							"GUID-9AB43217-7703-4E5C-A4E9-95ECE752BC96.html",
							"GUID-9AB43217-7703-4E5C-A4E9-95ECE752BC96.html",
							"GUID-9AB43217-7703-4E5C-A4E9-95ECE752BC96.html",
							"GUID-9AB43217-7703-4E5C-A4E9-95ECE752BC96.html",
							"GUID-9AB43217-7703-4E5C-A4E9-95ECE752BC96.html",
							"GUID-57D1D89F-96CA-4B17-91DF-87EE35C253AD.html",
							"GUID-57D1D89F-96CA-4B17-91DF-87EE35C253AD.html",
							"GUID-57D1D89F-96CA-4B17-91DF-87EE35C253AD.html",
							"GUID-57D1D89F-96CA-4B17-91DF-87EE35C253AD.html",
							"GUID-57D1D89F-96CA-4B17-91DF-87EE35C253AD.html",
							"GUID-D77D373B-6C31-4B89-B845-20EBC43B5338.html",
							"GUID-D77D373B-6C31-4B89-B845-20EBC43B5338.html",
							"GUID-D77D373B-6C31-4B89-B845-20EBC43B5338.html",
							"GUID-D77D373B-6C31-4B89-B845-20EBC43B5338.html",
							"GUID-D77D373B-6C31-4B89-B845-20EBC43B5338.html",
							"GUID-FAC00AC7-190C-4DA4-9DD1-1AA5CF66C91B.html",
							"GUID-FAC00AC7-190C-4DA4-9DD1-1AA5CF66C91B.html",
							"GUID-FAC00AC7-190C-4DA4-9DD1-1AA5CF66C91B.html",
							"GUID-FAC00AC7-190C-4DA4-9DD1-1AA5CF66C91B.html",
							"GUID-FAC00AC7-190C-4DA4-9DD1-1AA5CF66C91B.html",
							"GUID-15B6C8A2-A5C0-4B7C-8EA9-E78BB97A1E70.html",
							"GUID-15B6C8A2-A5C0-4B7C-8EA9-E78BB97A1E70.html",
							"GUID-15B6C8A2-A5C0-4B7C-8EA9-E78BB97A1E70.html",
							"GUID-15B6C8A2-A5C0-4B7C-8EA9-E78BB97A1E70.html",
							"GUID-15B6C8A2-A5C0-4B7C-8EA9-E78BB97A1E70.html",
							"GUID-469E62DD-F12B-4957-B7CE-CE9872A959AF.html",
							"GUID-469E62DD-F12B-4957-B7CE-CE9872A959AF.html",
							"GUID-469E62DD-F12B-4957-B7CE-CE9872A959AF.html",
							"GUID-469E62DD-F12B-4957-B7CE-CE9872A959AF.html",
							"GUID-469E62DD-F12B-4957-B7CE-CE9872A959AF.html",
							"GUID-54CDF33A-7EAD-4852-BA0C-B094340DD005.html",
							"GUID-54CDF33A-7EAD-4852-BA0C-B094340DD005.html",
							"GUID-54CDF33A-7EAD-4852-BA0C-B094340DD005.html",
							"GUID-54CDF33A-7EAD-4852-BA0C-B094340DD005.html",
							"GUID-54CDF33A-7EAD-4852-BA0C-B094340DD005.html",
							"GUID-54CDF33A-7EAD-4852-BA0C-B094340DD005.html",
							"GUID-54CDF33A-7EAD-4852-BA0C-B094340DD005.html",
							"GUID-54CDF33A-7EAD-4852-BA0C-B094340DD005.html",
							"GUID-54CDF33A-7EAD-4852-BA0C-B094340DD005.html",
							"GUID-C338829F-E46E-4F48-BC7F-FB2FD4F5E765.html",
							"GUID-C338829F-E46E-4F48-BC7F-FB2FD4F5E765.html",
							"GUID-C338829F-E46E-4F48-BC7F-FB2FD4F5E765.html",
							"GUID-C338829F-E46E-4F48-BC7F-FB2FD4F5E765.html",
							"GUID-C338829F-E46E-4F48-BC7F-FB2FD4F5E765.html",
							"GUID-317E7EAB-8478-4719-B61E-C3962DC4B956.html",
							"GUID-317E7EAB-8478-4719-B61E-C3962DC4B956.html",
							"GUID-317E7EAB-8478-4719-B61E-C3962DC4B956.html",
							"GUID-317E7EAB-8478-4719-B61E-C3962DC4B956.html",
							"GUID-317E7EAB-8478-4719-B61E-C3962DC4B956.html",
							"GUID-317E7EAB-8478-4719-B61E-C3962DC4B956.html",
							"GUID-317E7EAB-8478-4719-B61E-C3962DC4B956.html",
							"GUID-511002C5-EBFB-4368-9B0A-B0856020DA8E.html",
							"GUID-511002C5-EBFB-4368-9B0A-B0856020DA8E.html",
							"GUID-511002C5-EBFB-4368-9B0A-B0856020DA8E.html",
							"GUID-511002C5-EBFB-4368-9B0A-B0856020DA8E.html",
							"GUID-511002C5-EBFB-4368-9B0A-B0856020DA8E.html",
							"GUID-511002C5-EBFB-4368-9B0A-B0856020DA8E.html",
							"GUID-511002C5-EBFB-4368-9B0A-B0856020DA8E.html",
							"GUID-511002C5-EBFB-4368-9B0A-B0856020DA8E.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-5F220E9D-ADEA-4AE4-AFDF-4805F99FF1F2.html",
							"GUID-B2859BF5-FA82-4C16-9F20-1CAB153ABCA1.html",
							"GUID-B2859BF5-FA82-4C16-9F20-1CAB153ABCA1.html",
							"GUID-B2859BF5-FA82-4C16-9F20-1CAB153ABCA1.html",
							"GUID-B2859BF5-FA82-4C16-9F20-1CAB153ABCA1.html",
							"GUID-B2859BF5-FA82-4C16-9F20-1CAB153ABCA1.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-418D4259-4AF0-495E-A69E-34AF86FEA705.html",
							"GUID-583F51B5-E64F-49D3-995D-86BB3570AF16.html",
							"GUID-583F51B5-E64F-49D3-995D-86BB3570AF16.html",
							"GUID-583F51B5-E64F-49D3-995D-86BB3570AF16.html",
							"GUID-583F51B5-E64F-49D3-995D-86BB3570AF16.html",
							"GUID-583F51B5-E64F-49D3-995D-86BB3570AF16.html",
							"GUID-E6146ACA-EA1A-4F4B-8062-8B27B1E22725.html",
							"GUID-E6146ACA-EA1A-4F4B-8062-8B27B1E22725.html",
							"GUID-E6146ACA-EA1A-4F4B-8062-8B27B1E22725.html",
							"GUID-E6146ACA-EA1A-4F4B-8062-8B27B1E22725.html",
							"GUID-E6146ACA-EA1A-4F4B-8062-8B27B1E22725.html",
							"GUID-0FB3F908-88EE-45CE-94F5-E97AF9049C9B.html","GUID-7551DC67-D79D-4F0C-B56F-7B17E12400E0.html","GUID-CDA512D8-0DE4-4672-8716-04CAC681CB38.html","GUID-F05182E4-B102-4775-A746-1FF37F465312.html","GUID-E8251634-7B15-4073-A103-5A5F128B8699.html","GUID-125F1A93-76CC-4BD7-BACA-01844FBD5F4F.html","GUID-21750586-F9F2-4E33-87FB-8F2994BF4744.html","GUID-07985EED-D525-413B-AEFE-78B563328687.html","GUID-02A694CF-88A5-4ADA-8785-7EEEC62D66EA.html"];

var SearchTitles = ["Harmony 3 Wireless application examples for PIC32MZ W1 family",
"Contents Summary",
"Code Examples",
"Paho MQTT Client Power Save",
"Description",
"Downloading and building the application",
"Setting up WFI32 IOT Board",
"Running the Application",
"Over The Air (OTA) Programming Using Wi-Fi",
"Description",
"OTA Application framework Architecture",
"Securing OTA by verifying Images in Bootloader",
"OTA server JSON manifest",
"OTA image generation",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"OTA Boot Loader",
"Description",
"Securing OTA by verifying Images in Bootloader",
"Provisioning TrustFlex parts for OTA FW Verification",
"Enabling Secure OTA",
"Generating Signature",
"Required steps for Secure-ota",
"Using bootloader for Non-secure OTA",
"Disabling File system in Bootloader code",
"Downloading and Generating Bootloader Code",
"Setting up PIC32MZ W1 Curiosity Board",
"Generating BootLoader Code",
"Paho MQTT Client",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Paho MQTT TLS Client",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Secured TCP Client",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"TCP Server",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"UDP Client",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"UDP Server",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Weather Client",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Wi-Fi Easy Configuration",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Provisioning using TCP Socket",
"Provisioning using Mobile Application",
"Provisioning using HTTP(webpage)",
"Provisioning using Command line",
"Wifi-ethernet dual interface",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Wi-Fi Touch Demo",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Jumper Resistor Configuration",
"Running the Application",
"Known Issues:",
"IFTTT Demo",
"Description",
"Downloading and building the application",
"Creating an Applet on IFTTT web platform",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Appendix",
"Creating a Webhook applet on IFTTT web platform",
"WLAN AP",
"Description",
"Downloading and building the application",
"Configuring the Application",
"Setting up a regulatory region",
"Using MHC",
"Using command",
"Setting up the hardware",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Supported Commands",
"Wi-Fi Access Point(AP) Mode",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"WLAN STA",
"Description",
"Downloading and building the application",
"Configuring the Application",
"Setting up a regulatory region",
"Using MHC",
"Using command",
"Setting up the hardware",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Supported Commands",
"Wi-Fi Station(STA) Mode",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Web Socket Server",
"Description",
"Downloading and building the application",
"Setting up PIC32MZ W1 Curiosity Board",
"Running the Application",
"Microchip Information",
"The Microchip Website",
"Product Change Notification Service",
"Customer Support",
"Microchip Devices Code Protection Feature",
"Legal Notice",
"Trademarks",
"Quality Management System",
"Worldwide Sales and Service"];

var SearchInfo = [" Harmony 3 Wireless application examples for PIC32MZ W1 family MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices Refer to the following links for more information Microchip 32-bit MCUs Microchip 32-bit MPUs Microchip MPLAB X IDE Microchip MPLAB® Harmony Microchip MPLAB® Harmony Pages This repository contains the MPLAB® Harmony 3 Wireless application examples for PIC32MZ W1 family Release Notes MPLAB® Harmony License To clone or download these applications from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  ",
							" Contents Summary Folder Description apps Contains Wireless service example applications docs Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine) Use github pages of this repository for viewing it online ",
							" Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more wireless usecases Name Description OTA Bootloader OTA bootloader for PIC32MZW1 devices Wi-Fi OTA upgrade Wi-Fi OTA image upgrade demo Paho MQTT Client Paho MQTT client example application Paho MQTT TLS Client Paho MQTT TLS client example application TCP Client TCP Client example application TCP Server TCP Server example application UDP Client UDP Client example application UDP Server UDP Server example application Weather Client Weather Client example application Wi-Fi Soft AP (driver mode) Wi-Fi Soft AP driver mode example aplication Wi-Fi Soft AP (service mode) WiFi Soft AP service mode example Wi-Fi easy config (bare metal) Bare metal HTTP server / web-page based Wi-Fi provisioning example Wi-Fi easy config (RTOS) RTOS based HTTP server / web-page based Wi-Fi provisioning example Dual interface (Wi-Fi + Ethernet) Dual interface example application with Wi-Fi and Ethernet interfaces Wi-Fi STA (driver mode) Wi-Fi STA driver mode example aplication Wi-Fi STA (service mode) WiFi STA service mode example Wi-Fi touch demo Wi-Fi + CVD based touch demo IFTTT demo IFTTT example application Web Socket Server demo Web Socket Server demo ",
							" Paho MQTT Client Power Save This example application shows how to use WFI32-IoT device low power modes Extreme Deep sleep mode (XDS) Deep sleep mode (DS) Sleep mode and Idle mode along with Wi-Fi sleep mode(WSM) and Wi-Fi power off(WOFF) ",
							" Description This example application demonstrates below functionalities How to read room temperature data periodically using WFI32-IoT Board Connect to unsecured MQTT Broker using Paho MQTT Client and publishes temperature data to topic every 5 minutes The Device enters into configured sleep mode after receiving the publishes acknowledgement from MQTT Broker Device can wake-up from sleep modes using RTCC or Button Press(SW1) ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/paho_mqtt_client_power_save/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description wfi32_iot X MPLABX project for WFI32-IoT board ",
							" Setting up WFI32 IOT Board Connect the USB port(J200) on the board to the computer using a micro-USB cable Home AP (Wi-Fi Access Point with internet connection) ",
							" Running the Application 1 Open the project and launch Harmony3 configurator 2 Configure home AP credentials for STA Mode resized_configurator 3 Currently MQTT Service is configured to run a MQTT Client in unsecured mode to connect to test mosquitto org on the mqtt port (1883) In case the user wants to change this config please make the changes in the MQTT Service Module configurations as shown below: resized_mqttservice_configurator 4 Enable Power peripheral library all the configuration as shown in below Harmony3 configurator project graph powerplib_ds 5 By default application is configured to run into deep sleep modes (DS) User can select desired low power mode of MCU and Wi-Fi using Harmony3 configurator (MHC)/MPLAB® Code Configurator (MCC) menu powerplib_MCC_MENU Note: - Configuration to change MCU power save mode is “g_mcuSleepMode = MCU Power save mode” in application in apps_mqtt c file - Configuration to change MCU power save mode is “g_wiFiSleepMode = Wi-Fi power save mode” in application in apps_mqtt c file 6 Save configurations and generate code via Harmony3 configurator (MHC)/MPLAB® Code Configurator (MCC) 7 Build and program the generated code into the hardware using its IDE 8 Open the Terminal application (Ex :Tera term) on the computer 9 Connect to the \"USB to UART\" COM port and configure the serial settings as follows: - Baud : 115200 - Data : 8 Bits - Parity : None - Stop : 1 Bit - Flow Control : None 10 The Board will start reading room temperature data every 5 second using on board temperature sensor 11 The Board will connect to AP and then as per the default MQTT Service configuration it shall connect to test mosquitto org and publish room temperature data on the topic ‘MCHP/Sample/a’ after 5 Minute It also subscribes to topic ‘MCHP/Sample/b’ mqtt_client_powersave_console_1 12 If any third party MQTT Client connects to test mosquitto org and subscribes to the topic ‘MCHP/Sample/a’ it will receive the periodic room temperature data being published by the MQTT Client running on the WFI32-IoT board The default application will publish periodic room temperature data to a topic every 5 Minutes mqtt_client_powersave_brokerlog 13 After receiving the publishes acknowledgement from MQTT Broker device enter into sleep mode (XDS or DS) Sleep or idle mode along with Wi-Fi power save(WSM) mqtt_client_powersave_console_2 User can start performing the power measurement when the device prints the above console message “Published Msg Temperature =value in C” and UART console stop printing new messages The information on how to perform the power measurement with the WFI32-IoT board is available here The information on how to Design Low Power Application with WFI32 board is available here 14 In default application device will wake-up after 1 minute using RTCC as wake-up source 15 User can press WFI32-IoT Board SW1 button to wake-up device at any time Details of wake-up source supported in low power modes Supported Wake-up sources: XDS : EXT INT0(button press using SW1) DS Sleep Dream and Idle mode: EXT INT0(button press using SW1) and RTCC Note: RTCC default application wakeup time is 1 Minute Note: XDS and DS wakeup to work kindly make sure below plib_clk c chages are available in the project Replace condition / if(( CLKSTATbits SPLLRDY RCONbits POR == 1 RCONbits EXTR == 1) || (1 == CLKSTATbits SPLLRDY 0 == RCONbits POR ((1 == RCONbits EXTR) || (1 == RCONbits SWR)))) / With below condition if((( CLKSTATbits SPLLRDY) ((RCONbits POR == 1 RCONbits EXTR == 1) || (RCONbits DPSLP == 1))) || (1 == CLKSTATbits SPLLRDY 0 == RCONbits POR ((1 == RCONbits EXTR) || (1 == RCONbits SWR)))) This Changes will be include in next CSP release Before Entering to sleep mode non-wakeup interrupt sources needed to be disabled to achieve desired low power numbers User can find details of wakeup interrupt sources in the interrupts c file User is requested to ensure that app_mqtt c app_mqtt h app c and app h files are not overwritten with generated code Pre-condition for wake-up from sleep modes: The PMD3 register W24GMD bit should be set When Wi-Fi driver/service functionlity is completely removed from project The function WDRV_PIC32MZW_PowerSaveModeSet(WSM/WDS) should be called before entering the sleep When Wi-Fi driver/service functionlity is enabled ",
							" Over The Air (OTA) Programming Using Wi-Fi This example application acts as a Wi-Fi Station(STA) to connect to Access point(AP) and perform OTA application update process to download an image present in the user defined OTA-HTTP server ",
							" Description This application demonstrates how a user can perform OTA application upgrade using Wi-Fi The user would need to configure the Home AP credentials (like SSID and security items) The Wi-Fi service will use the credentials to connect to the Home AP and acquire an IP address Once the IP address is obtained application will perform OTA update process resized_wifi_sta_http_server_1 Application will try to connect with the defined server address and download the new image The downloaded image will be stored in the external flash (sst26vf) initially Application will reset the device to run new image once image is successfully downloaded from server When device is reset bootloader will try to program the image from the external flash and if programming is successful downloaded image from the server will be executed It is required to build \"ota_bootloader\" project located in the apps folder of wireless_apps_pic32mzw1_wfi32e01 repo first before building this application as the image of the bootloader application will be used to integrate with the \"wifi_ota_app_upgrade\" application image A unified hex file will be built using Hexmate tool and the unified HEX image will be loaded to the device More details about this can be found in \"Running Application\" section below This application uses File System a harmony component which internally use SPI protocol to place the newly downloaded image to the external flash spi_com ",
							" OTA Application framework Architecture Over the Air (OTA) firmware upgrade feature is designed with a two step process Image Downloading and Image Programming process Image Downloading process is done by OTA SERVICE harmony componet and ota_bootloader will take care of programming process Abstraction model: abstraction_model User Application: This is where the customer application logic is built OTA Service: This layer includes the service level logic implementation This is a Harmony component which provides certain user configurable parameters(ex- Version Periodic update check etc ) Based on user configuration generated code will be activated with required functionalities ota_service_component ota_service_conf OTA software platform / OTA Core : This is the platform layer that consist of the main OTA logic implementation When OTA process is triggered this layer will communicate with the transport layer to connect to OTA server If new image is available it will initiate download using transport layer If successfully downloaded it will store the new image into the File System File System : The architecture is designed to provide flexibility for the customer to choose the storage medium (ex- SST26 SPI flash SD card USB MSD in host mode etc ) Any medium supported by the Harmony3 file system can be used with the OTA service Bootloader : This layer consists of the logic to safely program images from the file system (external) into program the program memory (NVM) of the device At device boot the bootloader will check if a new image is available in the external image store and transfer it to the NVM ",
							" Securing OTA by verifying Images in Bootloader We have implemented 2 configurations of OTA Bootloader to perform signature verification of images: In software using Wolfcrypt (ota_booloader_wolfcrypt x) In Hardware using Trust Flex device (ota_booloader_trustflex x) By default application is configured for ota_booloader_wolfcrypt x in which signature verification will be done using wolfcrypt library User need to load the corresponding bootloader configuration as loadable component as per application requirement Loading bootloader into application is required only for generating factory image For more information on configuring loadable project please refer OTA System Service Configuration section of configuration md  For more details Please follow documentation provided for Over The Air (OTA) firmware update System Service  ",
							" OTA server JSON manifest The Application expects the HTTP based OTA server to provide metadata of images available in the server in json format During update checks the OTA service will download and parse this manifest file Each entry in the manifest file should include the following fields : Version indicates the application version number It is a integer value URL contains the image path from which the application image can be downloaded It is a string variable Digest contain the SHA256 digest of image to be downloaded It is a 64 byte string variable an should not include whitespaces Signature This optional field provides a capability to verify image Signature of image will be provided by user which will be used by bootloader to perform signature verification of image If this field is missing from Manifest file application will not store any Signature in OTA database But it is user responsibilty to undefine macro SYS_OTA_SECURE_BOOT_ENABLED in bootloader project to disable Signature verfication of images In this case only Digest verification will be done by bootloader Please follow Using bootloader for Non-secure OTA section of boolader manual EraseVer This optional field provides a capability to trigger an erase of an version which was downloaded earlier Customer may want to remove an image from the image store due to various reason application with bug may be one of them It is a bool variable If user configures this field as \"true\" OTA serice will delete image version mentioned in \"Version\" field If user configures this field as \"false\" OTA service will follow image downwload logic Sample JSON { \"ota\": [ { \"Version\": 3 \"URL\": \"http://192 168 43 173:8000/wifi_ota103 bin\" \"Digest\": \"745189cbb24b752a0175de1f9d5d61433ba47d89aff5b5a3686f54ca2d5dfb22\" \"Signature\": \"pra2wlOiZO/zjzqaP9DZGe9dmm0aC4gx4r0yoyI7DU3sVpkdJ034v5XoiN5jdpeuLRge4RjsB/KSrVho8pwC2w==\" \"EraseVer\": false } { \"Version\": 6 \"URL\": \"http://192 168 43 173:8000/wifi_ota100 bin\" \"Digest\": \"885189cbb24b7b1a0175deef9d5d61f53c247d89a095b5a3686f54ca2d5dfbaa\" \"Signature\": \"pra2wlOiZO/zjzqaP9DZGe9dmm0aC4gx4r0yoyI7DU3sVpkdJ034v5XoiN5jdpeuLRge4RjsB/KSrVho8pwC2w==\" \"EraseVer\": false } ] } OTA service will download json file from server first when update check process is triggered by application try to fetch information and proceed further For more details Please follow documentation provided for Over The Air (OTA) firmware update System Service  ",
							" OTA image generation Please refer Generating OTA image section in usage manual present in the documentation of Over The Air (OTA) firmware update System Service  ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_ota_app_upgrade/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Home AP (Wi-Fi Access Point with internet connection) HTTP server python 3 9 0 ",
							" Running the Application Open the project \"wifi_ota_app_upgrade\" Demo is configured with the default wifi credentials shown in the image below To change the configurations launch the Harmony 3 configurator and update the home AP credentials for STA Mode and generate code resized_wifi_sta_MHC1 Configuring server url : resized_srvr_confg_in_mhc For more details on manifest file please follow OTA server JSON manifest section of usage manual which is part of ota system component As a part of OTA process device will try to connect to user defined HTTP server If device is able to connect to server without any error it will try to fetch json manifest information User can use any HTTP server User may also use python command to create a local http server using below steps: Open command prompt and change driectory to the folder where ota image is present resized_Change_dir Use below python command in command prompt: python -m http server 8000 resized_http_server Default Application supports Non-secure OTA To enable Secure-OTA please follow details provided in Bootloader document Generate the code using MHC To create factory reset image It is required to integrate the bootloader and ota application image and create a single unified HEX file To integrate 2 images we can use hexmate tool which is readily available with MPLABX package as part of the standard installation To combine the hex files - User should load the \"ota_bootloader\" project located in the apps folder of \"wireless_apps_pic32mzw1_wfi32e01\" repo and include it into \"wifi_ota_app_upgrade\" project as a \"Loadable\" component For this right click on the \"wifi_ota_app_upgrade\" project click on \"properties\" and select \"ota_bootloader\" project User need to make sure that the steps mentioned in \"ota_bootloader\" reference document is followed before this step project_loading project_loading_1 Click on \"Apply\" button to make the applied changes effective: project_loading_2 Build and program the application Connect to a USB to UART converter to UART1 and Open a Terminal application (Ex :Tera term) on the computer Configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None The device will connect to the Home AP and print the IP address obtained wifi_sta_log1 Once IP address is obtained the device will initiate OTA process and try to fetch json manifest content periodically for every 60 sec User should make sure that both HTTP server and the PIC32MZW1 device are part of same wifi network (or connected to same Home AP) User can see periodical messages as shown in belo screen shot : ota_peridocal_msg In case secure-ota is enabled please store Factory image signature into system (External flash) Please follow steps provided in Verification of factory image section of usage manual which is part of ota system component It is required to perform a \"post-build\" step to create ota image with file extension \" bin\" (which can be placed in the server and downloaded during OTA process) All required files for post-build process will be generated (during step 5) mentioned above) automatically in \"tools\" folder created inside project folder tools_folder Right click on the \"wifi_ota_app_upgrade\" project and click on properties project_loading Select \"building\" insert below command and click \"OK\": / /tools/hex2bin/hex2bin exe Note : python should be present in the system variable path post_build For more details Please follow documentation provided in link For the bin OTA image to be downloded user can use the same project \"wifi_ota_app_upgrade\": User should change the \"version number\" in the OTA component in the MHC higher than currently running image Ensure the same version number is there in the json file also Compile the project Update the \"Digest\" and other relevant fields in the json file corresponding to the ota image to be downloaded The \"Digest\" is printed in the compilation logs Place the bin image to be downloded into the HTTP server The bin image can be found in below path which is generated during \"wifi_ota_app_upgrade\" project build : firmware wifi_ota_app_upgrade X dist pic32mz_w1_curiosity_freertos production Please follow OTA server JSON manifest section of usage manual which is part of ota system component In case the user wants to download any other ' bin' image they need to ensure that the digest corresponding to the image is calculated and updated in the json file Once image is downloaded successfully the application will print a message in the console User need to reset the device to load the new image ota_process_pass If OTA upgrade fails user need to reset the device to initiate OTA process again During reset device will check if any newly downloaded image is available in the external flash(sst26vf): if yes bootloader will program new image to program-flash area of the device from external flash if programming is successful bootloader will perform signature verification (if secure-ota is enabled sinature verification will be performed otherwise signature verification will not be performed) digest verification of image and if verification is succssful bootloader will hand over control and application will start executing if if verifiction is failed bootloader will try to load previous successful image For more details please follow Flow chart provided in usage manual which is part of ota system component if no new image is available then bootloader will hand over control without programming any image and application image already present in the program-flash area will start executing User will come to know if new image is running by checking the version number in console print ",
							" OTA Boot Loader This example acts as loader of OTA image (downloaded using OTA process) to load it to device memory ",
							" Description This bootloader project can be used by user to program an image which is downloaded through OTA process It is required to build this project first using its IDE (MPLABX) before building OTA application as the image of the bootloader will be integrated with the \"wifi_ota_app_upgrade\" application image During boot-up bootloader will check if any new valid image available in the external flash If available it chooses the newly (latest downloaded) available image in the External flash (sst26vf) and program it to Program-Flash area of the device Bootloader uses SPI protocol to program the image from the external flash If there is no new downloaded image present in the external flash bootloader will handover the control to current application present in the program-flash area and application will start executing For more details Please follow documentation provided for Over The Air (OTA) firmware update System Service ",
							" Securing OTA by verifying Images in Bootloader We have implemented 2 configurations of OTA Bootloader to perform signature verification of images: In software using Wolfcrypt (ota_booloader_wolfcrypt x) This configuration uses wolfcrypt library to verify siganture of image wolfcrypt User need to provide public key in the form of array in pub_key h file Array holds the DER encoded public key The name of the array should be pubKey[]  pub_key_array_resized For development and testing user may use key2heder py python file present in tools folder of bootloader project User follow below steps: Copy the key2heder py file and file containing public key to a particular folder Use below command from command prompt: python key2header py [file containing public key] e g : python key2header py ECC_prime256v1 pub key_header h file will be created in the folder This file contains an array Copy this array and paste it in pub_key h In Hardware using Trust Flex device (ota_booloader_trustflex x) This configuration requires trustflex device for signature verification For provisioning of trust flex device and other hardware details please follow Provisioning TrustFlex parts for OTA FW Verification below In MHC ATECC608 component is configured for signature verification ATECC608 ",
							" Provisioning TrustFlex parts for OTA FW Verification ATECC608 based Trustflex can be used to perform secure firmware verification The steps to provision it using TPDS2 is documented here Setup TPDS V2 Setup TPDSV2 following the steps at https://microchipdeveloper com/authentication:trust-platform-v2 Make sure that you update TPDS after installation Hardware Setup Plug in the DT100104 click board into the microbus interface Make sure that you flip all DIP switches other than SW1:2 in click board to OFF position This will configure the board to expose the TrustFlex device over the I2C Bus trust_flex_image1 Device Firmware TPDS talks to the trust elements using the KitProtocol So before using TPDS to provision TrustFlex with the PIC32MZW1 device we need to flash the KitProtocol firmware into the dev-board To update the kit-protocol firmware to use I2C1 instead of the default I2C2 (connected to the onboard TnG module) change HAL_I2C_I2C2 defined in hal_i2c_harmony h file of the kit protocol project to HAL_I2C_I2C1 When the firmware boots-up the UART console (15008N1) will display the devices detected trust_flex_image2 trust_flex_image3 Loading the Public Key for FW verification (Provisioning) Open TPDS and select ATECC608-TFXTLS configurator under the \"Configurators\" Tab SelectTrustFlexConfigurator Select the Firmware Validation (Secure Boot) usecase from the next screen trust_flex_image5 Load the public key into Slot 15 trust_flex_image6 Generate a provisioning package and use it to provision the sample The attached kit with the trustFlex device mounted on it will be automatically detected and provisioned trust_flex_image7  trust_flex_image8 You can now use the device to verify image signatures in the bootloader ",
							" Enabling Secure OTA By default secure ota option will be disabled To enable it user need to follow below steps Enable Secure OTA Functionality as described in configure Advances Configuration section of link  Define \"SYS_OTA_SECURE_BOOT_ENABLED\" in \"bootloader h\" of bootloader project User can simply uncomment line of code in \"bootloader h\" as shown in below image : define_secure_boot Follow steps describe in Required steps for Secure-ota of this document ",
							" Generating Signature For generating signature please refer Generating Signature section of usage manual which is part of ota system component ",
							" Required steps for Secure-ota Generate private key using command openssl ecparam -genkey -name prime256v1 -noout -out ECC_prime256v1 key Generate public key using command openssl exe ec -in ECC_prime256v1 key -pubout -out ECC_prime256v1 pub In case of ota_booloader_wolfcrypt x public key should be provided in pub_key h header file as described above in Securing OTA by verifying Images in Bootloader section In case of ota_booloader_trustflex x please follow Provisioning TrustFlex parts for OTA FW Verification as described above User need to store signature of Factory image into system (External flash) This step should be done after factory image is programmed into device and application is running This is one time job Please follow steps provided in Verification of factory image section of usage manual which is part of ota system component Create OTA image following Generating the OTA image section of usage manual which is part of ota system component Generate signature of OTA images using private key as described above in Generating Signature of this document User need to mention signature in Manifest file please follow OTA server JSON manifest section of usage manual which is part of ota system component ",
							" Using bootloader for Non-secure OTA User need to undefine macro SYS_OTA_SECURE_BOOT_ENABLED in \"bootloader h\" of bootloader project to disable Signature verfication of images In this case only Digest verification will be done by bootloader define_secure_boot ",
							" Disabling File system in Bootloader code The File system can be disbaled only in the bootloader ota_booloader_wolfcrypt x User can disable the File System by undefining the macro SYS_OTA_FS_ENABLED in bootloader h Also user can enbale the feature jumping to the start address of the new image downloaded via file downloader by enabling the macro SYS_OTA_FILE_JUMP_ENABLE in bootloader h Update the jump address of the new image APP_IMG_BOOT_ADDR_2 in ota_config h file This feature is available only with ota_booloader_wolfcrypt x  ota_bootloader_fs_macro ",
							" Downloading and Generating Bootloader Code To download or clone this application from Github go to the top level of the repository Path of the project within the repository is apps/ota_bootloader/firmware  To genearte code refer to the following table and open the project using its IDE Project Name Description ota_booloader_trustflex x MPLABX project for PIC32MZ W1 Curiosity Board using trustflex click board ota_booloader_wolfcrypt x MPLABX project for PIC32MZ W1 Curiosity Board using wolfcrypt library ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable ",
							" Generating BootLoader Code Open \"ota_bootloader\" project and launch Harmony3 configurator Path of the application within the repository is apps/ota_bootloader/firmware  In case ota_booloader_wolfcrypt x to be used provide public key in pub_key h file as described above This step is not required in case customer wants to use ota_booloader_trustflex x  By Default Secure OTA (verifying signture in bootloader) is disabled To enable it please follow Enabling Secure OTA section as described above Compile the project using MPLABX ",
							" Paho MQTT Client This example application acts as a Paho MQTT Client to connect to unsecured MQTT Broker and publishes and subscribes to data on topics ",
							" Description This application demonstrates how a user can use the Paho MQTT Client to connect to a MQTT Broker The system shall run in bare metal mode and the application shall come up in STA mode User will need to configure the Wi-Fi credentials for the Home AP and MQTT Service The default application will try to establish MQTT connection with test mosquitto org and publishes message to a topic every 30 sec ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/paho_mqtt_client/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Home AP (Wi-Fi Access Point with internet connection) ",
							" Running the Application 1 Open the project and launch Harmony3 configurator 2 Configure home AP credentials for STA Mode resized_configurator_1 3 Currently MQTT Service is configured to run a MQTT Client in unsecured mode to connect to test mosquitto org on the mqtt port (1883) In case the user wants to change this config please make the changes in the MQTT Service Module configurations as shown below: resized_mqttservice_configurator 4 Save configurations and generate code via MHC 5 Build and program the generated code into the hardware using its IDE 6 Open the Terminal application (Ex :Tera term) on the computer 7 Connect to the \"USB to UART\" COM port and configure the serial settings as follows: - Baud : 115200 - Data : 8 Bits - Parity : None - Stop : 1 Bit - Flow Control : None 8 The Board will connect to Home AP and then as per the default MQTT Service configuration it shall connect to test mosquitto org and publish messages on the topic 'MCHP/Sample/a' periodically every 30 sec It also subscribes to topic 'MCHP/Sample/b' mqtt_client_publish_console 9 If any third party MQTT Client connects to test mosquitto org and subscribes to the topic 'MCHP/Sample/a' it will receive the periodic messages being published by the MQTT Client running on thr PIC32MZW1 resized_third_party_mqtt_client_subscribe 10 In case the Third Party MQTT Client publishes onto the topic 'MCHP/Sample/b' the Paho MQTT Client running on the PIC32MZW1 shall receive the messages being published onto this topic since it has subscribed to it resized-third_party_mqtt_client_publish mqtt_client_subscribe_console ",
							" Paho MQTT TLS Client This example application acts as a Paho MQTT TLS Client to connect to Secured MQTT Broker and publishes and subscribes to data on subtopics ",
							" Description This application demonstrates how a user can use the Paho MQTT Client to connect to a Secured MQTT Broker The application shall come up in AP Provisioing mode and user will need to configure the Wi-Fi credentials for the Home AP The default application will try to establish MQTT TLS connection with test mosquitto org and publishes message to a topic every 30 sec ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/paho_mqtt_tls_client/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Home AP (Wi-Fi Access Point with internet connection) ",
							" Running the Application Open the project and launch Harmony3 configurator Currently MQTT Service is configured to run a MQTT Client in Secured mode to connect to test mosquitto org on the mqtt secured port (8883) In case the user wants to change this config please make the changes in the MQTT Service Module configurations as shown below: resized_mqttservice_configurator Save configurations and generate code via MHC Build and program the generated code into the hardware using its IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None The device will come up in AP Provisioning mode and wait for Home AP credentials to be configured into it Provision the device using the following CLI Command \"wifiprov set 0 1 \"GEN\" 0 1 3 \"DEMO_AP\" \"password\"\" for Home AP with SSID DEMO_AP and password as 'password' More details on the CLI command can be found here mqtt_client_provision_console The Board will connect to Home AP and then as per the default MQTT Service configuration it shall connect to test mosquitto org and publish messages on the topic 'MCHP/Sample/a' periodically every 30 sec It also subscribes to topic 'MCHP/Sample/b' mqtt_client_publish_console If any third party MQTT Client connects to test mosquitto org and subscribes to the topic 'MCHP/Sample/a' it will receive the periodic messages being published by the MQTT Client running on the PIC32MZW1 resized_third_party_mqtt_client_subscribe In case the Third Party MQTT Client publishes onto the topic 'MCHP/Sample/b' the Paho MQTT Client running on the PIC32MZW1 shall receive the messages being published onto this topic since it has subscribed to it resized_third_party_mqtt_client_publish mqtt_client_subscribe_console Note: The secured tcp connection may require the user to modify WolfSSL component settings in MHC depending on the security settings of the site/ server he is trying to access ",
							" Secured TCP Client The PIC32MZW1 example application acts as a TCP Client to connect to Secured TCP Server and exchange data in a non-blocking manner ",
							" Description This application demonstrates how a user can use a TLS TCP client to connect to a TCP server The user would need to configure the Wi-Fi credentials for the Home AP and the TLS server details The default application will try to establish a TLS connection with www google com and send a POST request to it ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/tcp_client/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Home AP (Wi-Fi Access Point with internet connection) ",
							" Running the Application Open the project and launch Harmony3 configurator Configure home AP credentials for STA Mode resized_configurator Currently Net Service is configured to run a TCP Client in Secured mode to connect to www google com on the https port (443) In case the user wants to change this config please make the changes in the Net Service Module configurations as shown below: resized_netservice_configurator Save configurations and generate code via MHC Build and program the generated code into the hardware using its IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None The device will connect to the Home AP and print the IP address obtained The Board will connect to Home AP and then as per the default Net Service configuration it shall connect to www google com and do data exchange: secured_tcp_client_console Note: The secured tcp connection may require the user to modify WolfSSL component settings in MHC depending on the security settings of the site/ server he is trying to access ",
							" TCP Server This example application acts as a TCP Server to which a TCP Client can connect and exchange data in a non-blocking manner ",
							" Description This application demonstrates how a user can start a TCP server on the device which is running in Soft AP Mode The user would need to configure the Wi-Fi settings for the Soft AP and the port number at which the TCP server would be started The Application will come up as a Soft AP with the TCP Server running on it A third-party STA will connect to the Soft AP device The TCP Client on the third -party STA will then connect to the TCP Server running on the device ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/tcp_server/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Laptop/ Mobile (to run the TCP Client on it) ",
							" Running the Application 1 Open the project and launch Harmony3 configurator resized_configurator 2 Currently Net Service is configured to run as TCP Server running on port 5555 In case the user wants to change this config please make the changes in the Net Service Module as shown below: resized_netservice_configurator Currently Net Service is configured to run a TCP Server which awaits connection from a TCP Client on port 5555 In case the user wants to change this config please make the changes in the Net Service Module configurations as shown below 4 Save configurations and generate code via MHC 5 Build and program the generated code into the hardware using its IDE 6 Open the Terminal application (Ex :Tera term) on the computer 7 Connect to the \"USB to UART\" COM port and configure the serial settings as follows: - Baud : 115200 - Data : 8 Bits - Parity : None - Stop : 1 Bit - Flow Control : None 8 The device shall come up as SoftAP and then as per the default Net Service configuration the TCP Server shall come up awaiting a connection from a TCP Client 9 Connect a Laptop to the Soft AP (with ssid DEMO_AP_SOFTAP) running on the DUT 10 Start a TCP Client (python script) on laptop giving the server IP as the IP of the Board and the port as 5555: system_console tcp_client_console ",
							" UDP Client This example application acts as a UDP Client which connects to a UDP Server and exchanges data in a non-blocking manner ",
							" Description This application demonstrates how a user can use a UDP client to connect to a UDP server The user would need to configure the Wi-Fi credentials for the Home AP and the UDP server details The default application will send a string to the UDP server Any standard UDP server can be used to enable the device to connect as a UDP client ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/udp_client/firmware To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Laptop/ Mobile (to run the UDP Server on it) Access Point ",
							" Running the Application 1 Open the project and launch Harmony3 configurator 2 Configure Home AP credentials for STA Mode resized_configurator 3 Currently Net Service is configured to run as UDP Client which connects to a UDP Server running on port 4444 In case the user wants to change this config please make the changes in the Net Service Module as shown below: resized_netservice_configurator 4 Save configurations and generate code via MHC 5 Build and program the generated code into the hardware using its IDE 6 Open the Terminal application (Ex :Tera term) on the computer 7 Connect to the \"USB to UART\" COM port and configure the serial settings as follows: - Baud : 115200 - Data : 8 Bits - Parity : None - Stop : 1 Bit - Flow Control : None 8 User can run any third party utility or a udp_server python script to act as UDP Server running on the Laptop system_init_console 9 The Board shall connect to Home AP and then as per the default Net Service configuration it shall bring up the UDP Client which shall connect to a UDP Server dut_console system_console Note: TLS Connection is not supported for UDP Client configuration ",
							" UDP Server This example application acts as a UDP Server to which a UDP Client can connect and exchange data in a non-blocking manner ",
							" Description This application demonstrates how a user can start a UDP server on the device The user would need to configure the Wi-Fi credentials for the Home AP and the port number at which the UDP server should be started Any standard UDP client can be used to connect to the device which is operating as a UDP server ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/udp_server/firmware To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Laptop/ Mobile (to run the UDP Client on it) Home AP (Wi-Fi Access Point) ",
							" Running the Application 1 Open the project and launch Harmony3 configurator 2 Configure Home AP credentials for STA Mode resized_configurator 3 Currently Net Service is configured to run as UDP Server running on port 3333 In case the user wants to change this config please make the changes in the Net Service Module as shown below: resized_netservice_configurator 4 Save configurations and generate code via MHC 5 Build and program the generated code into the hardware using its IDE 6 Open the Terminal application (Ex :Tera term) on the computer 7 Connect to the \"USB to UART\" COM port and configure the serial settings as follows: - Baud : 115200 - Data : 8 Bits - Parity : None - Stop : 1 Bit - Flow Control : None 8 The Board shall connect to Home AP and then as per the default Net Service configuration it shall bring up the UDP Server which shall await connection from a UDP Client dut_init_console 9 User can run any third party utility or a udp_client python script to act as UDP Client running on the Laptop system_console dut_console Note: TLS Connection is not supported for UDP Server configuration ",
							" Weather Client This example demonstrates the use of the PIC32MZW1 to retrieve weather information from a weather server (api openweathermap org) ",
							" Description This application demonstrates how a user can use a TCP client to connect to a Weather server The user would need to configure the Wi-Fi credentials for the Home AP The default application will try to establish a TCP Client connection with api openweathermap org and send a POST request to it ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/weather_client/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Home AP (Wi-Fi Access Point with internet connection) ",
							" Running the Application 1 Open the project and launch Harmony3 configurator 2 Configure home AP credentials for STA Mode resized_weather_client_WiFi 3 Currently Net Service is configured to run a TCP Client in non-Secured mode to connect to api openweathermap org on the http port (80) In case the user wants to change this config please make the changes in the Net Service Module configurations as shown below: resized_weather_client_TCP 4 Save configurations and generate code via MHC 5 Build and program the generated code into the hardware using its IDE 6 Open the Terminal application (Ex :Tera term) on the computer 7 Connect to the \"USB to UART\" COM port and configure the serial settings as follows: - Baud : 115200 - Data : 8 Bits - Parity : None - Stop : 1 Bit - Flow Control : None 8 The device will connect to the Home AP and print the IP address obtained 9 The Board will connect to Home AP and then as per the default Net Service configuration it shall connect to api openweathermap org and do data exchange: weather_client_log ",
							" Wi-Fi Easy Configuration This example showcase Wi-Fi AP application to illustrate SoftAP mode Wi-Fi provisioning via command line(CLI) Socket and HTTP ",
							" Description This application demonstrates how a user can configure the device with the credentials of the Home AP The device will come up in SoftAP mode the user will connect to the SoftAP via a third party STA User will then send the Home AP credentials to the device and the device will store the credentials in the NVM The device will auto reboot Upon reboot the device will come up in STA mode it will connect to the Home AP and acquire an IP address wifi_easyconfig_diagram DUT will act either in AP mode or STA mode ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_easy_config/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX FreeRTOS project for PIC32MZ W1 Curiosity Board pic32mz_w1_curiosity MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Home AP (Wi-Fi Access Point with internet connection) ",
							" Running the Application Open the project and launch Harmony3 configurator Configure SoftAP credentials as required resized_wifi_easyconfig_MHC1 Save configurations and generate code via MHC Build and program the generated code into the hardware using its IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None The device will boot in SoftAP mode wifi_easyconfig_log1 ",
							" Provisioning using TCP Socket Connect to the SoftAP from a laptop or mobile phone User may have to enter password on laptop or mobile phone for connecting to device SoftAP based on security type selected in MHC As soon as the client connects the device will print the IP address leased to it wifi_easyconfig_log2 Using a TCP Client tool like Packet Sender installed in the laptop connected to the softAP send the following JSON file to AP’s provisioning port (192 168 1 1:6666) Note: User would need to edit the default JSON file as per their home AP settings { \"mode\": 0 \"save_config\": 1 \"countrycode\":\"GEN\" \"STA\": { \"ch\": 0 \"auto\": 1 \"auth\": 3 \"SSID\": \"dlink\" \"PWD\":\"password\"} \"AP\": {\"ch\": 2 \"ssidv\": 1 \"auth\": 4 \"SSID\": \"DEMO_AP_SOFTAP\" \"PWD\": \"password\" } } wifi_easyconfig_tool For more details follow the steps available in : Wi-Fi provisioning Using JSON Format under Wi-Fi provisioning System Service ",
							" Provisioning using Mobile Application Connect to the SoftAP from a mobile phone User may have to enter password on mobile phone for connecting to device SoftAP based on security type selected in MHC As soon as the client connects the device will print the IP address leased to it wifi_easyconfig_log2 For more details follow the steps available in : Wi-Fi provisioning Using Mobile Application under Over Wi-Fi provisioning System Service ",
							" Provisioning using HTTP(webpage) Connect to the SoftAP from a laptop or mobile phone User may have to enter password on laptop or mobile phone for connecting to device SoftAP based on security type selected in MHC As soon as the client connects the device will print the IP address leased to it wifi_easyconfig_log2 For more details follow the steps available in : Wi-Fi provisioning using HTTP under Wi-Fi provisioning System Service ",
							" Provisioning using Command line User can enter the below command to switch mode to STA and set desired SSID passphase and security wifiprov set 0 1 country_code channel authtype ssid_name psk_name For more details follow the steps available in page: Wi-Fi provisioning using CLI The device will switch from AP mode to STA mode The device will now connect to the configured AP wifi_easyconfig_log3 ",
							" Wifi-ethernet dual interface This example application acts as a Soft AP with both wifi and ethernet interface enabled ",
							" Description This application demonstrates how a user can enable both wifi and ethernet interface The system shall run in freertos mode and the application shall come up in AP mode ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_eth_dual_interface/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Laptop (connect the ethernet cable between laptop and curiosity board) Mobile (wifi-interface) ",
							" Running the Application Open the project and launch Harmony3 configurator Configure credentials for AP Mode resized_configurator Save configurations and generate code via MHC Build and program the generated code into the hardware using its IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None The Board will come up in AP mode with AP mode IP address: dual_interface_AP_mode_console Connect wifi interface to \"pic32mzw1\" AP Once wifi interface is connected the assigned IP address will be visible in UART console: dual_interface_wifi_connected_console User can verify the connectivity status by pinging pic32mzw1 from laptop or mobile to respective interface ( ethernet or wifi ) : resized_dual_interface_wifi_ping_console ",
							" Wi-Fi Touch Demo This example application acts as a TCP Server to which a TCP Client can connect and visualize QT7 Touch Xpro data ",
							" Description This application demonstrates how a user can implement a Wi-Fi based Touch application using PIC32MZ-W1's internal hardware CVD Controller and QT7 Xplained Pro self-capacitance touch evaluation kit This demo will start a TCP server on the device which is running in Soft AP Mode The Application will come up as a Soft AP and wait for a device to connect Afterwards the TCP Server will start running on it A python script to emulate a dummy TCP client is provided which will display real-time sensor operations on QT7 Xpro board ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_touch_demo/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description PIC32_WFI32E_Curiosity_QT7_Touch_Example X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect a programmer tools such as SNAP ICD4 etc to ICSP header On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter QT7 Xpro board is connected to Curiosity Xpro header Laptop / Mobile (to run the TCP Client on it) ",
							" Jumper Resistor Configuration Jumper J211 is connected between pins 2-3 (closer to xpro header) Jumper J209 is disconnected Jumpers J301 are disconnected (to use external programmer tool) Remove resistor R220 as it is pulling up the pin used by the 3rd slider segment on the QT7 resized_hardware_setup ",
							" Running the Application Open the project and launch Harmony3 configurator Currently the Wi-Fi Service is configured as AP mode with default values for SSID Auth type etc resized_configurator Currently Net Service is configured to run as TCP Server running on port 5555 In case the user wants to change this config please make the changes in the Net Service Module as shown below: resized_netservice_configurator Save configurations and generate code via MHC Build and program the generated code into the hardware using its IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None The device shall come up as a Soft AP and then as per the Net Service configuration the TCP Server shall come up awaiting a connection from a TCP Client Connect a PC to this Soft AP (using params from step 2) and run the provided python script (tested with Python v3 8 and Windows 10) Connect the python client giving the server IP (the IP of the Board) and the port as 5555 All operations from the QT7 Xpro board will now be visible real-time on the GUI: resize_sample_demo_run ",
							" Known Issues: ",
							" IFTTT Demo This example application demosntrates how we can generate a trigger to IFTTT web platform to make it perform a specific action like sending a mail/ sms etc using an applet ",
							" Description IFTTT is short for \"If This Then That\" IFTTT is a third-party web platform which uses applets for performing specific actions when they are triggered via a connection This application demonstrates how a user can trigger a pre-existing applet The application shall come up in STA mode and will establish a TLS connection with maker ifttt com It shall send a trigger every time the button (SW1) on the Curiosity Board is pressed ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/ifttt/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Creating an Applet on IFTTT web platform IFTTT is a third-party web platform and one can create an applet of their own More details on how one can use IFTTT and create their own applets can be found at https://help ifttt com/hc/en-us/articles/360021401373-Creating-your-own-Applet More details on how to use a webhook applet in IFTTT can be found in the Appendix of this document ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable to power on the board On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Home AP (Wi-Fi Access Point with internet connection) ",
							" Running the Application Open the project and launch Harmony3 configurator Configure home AP credentials for STA Mode MHC_SSID_Configuration Save configurations and generate code via MHC Currently application expects the user to create an applet at the IFTTT web platform and configure the relevant details related to the applet in the app c file These details will help in creating the trigger which we send to make the applet perform the action The user would need to populate the following Parameter Name Default Value Description IFTTT_EVENT_TYPE IFTTT_EVENT_BUTTON_PRESS The IFTTT applet can be triggered in two ways via this application - by pressing the button on the board (IFTTT_EVENT_BUTTON_PRESS) or by running a timer (IFTTT_EVENT_PERIODIC_TIMER) and sending the trigger periodically The default event type is button press to trigger the applet IFTTT_EVENT_PERIOIDC_TIMER_TIMEOUT 100 sec This parameter is used for setting the timeperiod in sec after which a periodic trigger will be generated This is valid only when the IFTTT_EVENT_TYPE has been set to IFTTT_EVENT_PERIODIC_TIMER IFTTT_EVENT \"YOUR_EVENT\" This is a mandatory parameter to be filled in by the user and is the 'event' which triggers the applet This 'event' was used while creating the applet at the IFTTT web platform IFTTT_KEY \"YOUR_KEY\" This is a mandatory parameter to be filled in by the user and is the the 'key' which is generated after the creation of the applet at the IFTTT web platform IFTTT_NUM_OF_VALUES 1 The IFTTT applet can use upto 3 values/ data while performing an action This parameter indicates the number of values which this application needs to send along with the trigger IFTTT_VALUE1 \"Value1\" Data Value1 that needs to be sent along with the trigger IFTTT_VALUE2 \"Value2\" Data Value2 that needs to be sent along with the trigger IFTTT_VALUE3 \"Value3\" Data Value3 that needs to be sent along with the trigger IFTTT_USER_CALLBACK NULL In case users want to process some data and based on the result want to dynamically decide if the trigger needs to be sent or not they will need to map this parameter to APP_IFTTT_Callback() function and implement the action inside this function This function is expected to return a true if the trigger needs to be sent else false based on the processing of the data relevant to the user application For example the user may be implementing a temperature sensor and would want to poll periodically for the temperature but send in a trigger only when the temperature crosses certain threshold In such a case implementing this function accordingly can help achive the above objective Also there can be requirement that the user needs to also send in the sensed temperature value with the trigger which can be populated in the 'Value1' and sent IFTTT_USER_CALLBACK_CTX NULL Callback context/ parameter which will be passed on to APP_IFTTT_Callback() This could a structure pointer which contains the data to be processed and decide if the trigger needs to be sent Build and program the generated image into the hardware using the IDE Open the terminal application(Ex:Tera term) on the computer Connect to the COM port related to the external USB-UART connected to the GPIO heade and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None The Board will connect to Home AP Console_STA_Connected Every time the button/ switch (SW1) is pressed Curiosity_Board  it shall connect to maker ifttt com and send the trigger Console_Trigger_Sent This Trigger will be received by the ifttt server which will invoke the applet Let us assume the user created an applet using webhooks which shall 'send an email' as an action The email could look something like this: Applet_Email Every time a trigger is being sent by the Curiosity Board the red LED on the board will be ON and it will go OFF once the trigger request has been successfully trasmitted to IFTTT server Any new request while the LED is ON will not be honoured Hence it is receommended to press the button for a new request only when the red LED has gone OFF ",
							" Appendix ",
							" Creating a Webhook applet on IFTTT web platform Create an IFTTT account Sign in to the account Click \"Create\" on the right side toolbar to create an applet applet_create Clock on 'Add' and choose \"webhooks\" applet_choose_service applet_choose_webhooks Choose a trigger - 'Receive a webrequest' applet_trigger Fill in the event name and create a 'trigger' Copy the event and past it to parameter IFTTT_EVENT in the demo code applet_trigger_create Add the action - could be sending an 'email' applet_action_add applet_action_email Set the action fields In case of 'email' it could be subject and body of the mail applet_action_fields 'Finish' the applet applet_finish Goto webhooks settings (https://ifttt com/maker_webhooks/setting) applet_webhook_settings The string after the https://maker ifttt com/use/ in the URL is the 'Key' needed by the Demo Application Copy the key and pasted it to parameter IFTTT_KEY in the demo code ",
							" WLAN AP This example application shows how to use the PIC32MZW1 WLAN APIs to configure the device in AP mode directly using the WLAN driver APIs ",
							" Description This application shows the various commands to be used for AP mode of PIC32MZW1 device The user can use these commands in configuring the device as AP start or stop the device as AP scan operations etc ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository and click clone Path of the application within the repository is apps/wifi_ap/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_driver X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Configuring the Application ",
							" Setting up a regulatory region The available regulatory domains are - GEN USA EMEA CUST1 and CUST2 One of these regulatory domains must be selected as an active domain This selection can be done in two ways ",
							" Using MHC Figure below shows how to set the regulatory domain in MHC and the path is: TCPIP SYS_CONSOLE - TCP/IP STACK - BASIC CONFIGURATION - PIC32MZW1 mhc_regulatory ",
							" Using command wlan set regdomain reg_domain_name is the command used to set the regulatory domain (wlan set regdomain USA – sets the regulatory domain to USA) Note: User can change the regulatory domain using this command only if the current setting is \"None\" (cofigured using MHC) ",
							" Setting up the hardware The following table shows the target hardware for the application projects Project Name Board pic32mz_w1_curiosity_driver X PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter like USB UART click respectively ",
							" Running the Application 1 Open the Terminal application (Ex :Tera term) on the computer 2 Connect to the \"USB to UART\" COM port and configure the serial settings as follows: - Baud : 115200 - Data : 8 Bits - Parity : None - Stop : 1 Bit - Flow Control : None 3 Build and Program the application project using its IDE 4 Console displays the initialization messages and WLAN config if already saved in NVM output ",
							" Supported Commands Command Description wlan config ssid ssid_length ssid_visible channel open/wpa2/wpam/wpa3/wpa3m/wep password Configures the SSID SSID length SSID visibility channel number and the security of the AP that DUT wants to connect NOTE: Valid channel numbers are in range 1-13 wlan ap start Start the AP wlan ap stop Stop the AP wlan show devices The connected devices are shown – MAC and IP addresses are displayed wlan scan active / passive channel Runs either a active or passive scan (as per the input) on the channel number specified wlan save config Stores the WLAN configurations given in command “wlan config” to flash memory On restart DUT is started as AP with the credentials stored in flash wlan set regdomain reg_domain_name Sets the regulatory domain wlan get regdomain all / current Displays the regulatory domain all – request all regulatory domains; current - request current regulatory domain ",
							" Wi-Fi Access Point(AP) Mode This example application acts as a Wi-Fi Access point(AP) to connect to Laptop/Mobile(STA) and exchange data ",
							" Description This application demonstrates how a user can configure the device to operate in SoftAP mode The device will come up in SoftAP mode and any other device(STA) can connect as a STA to the SoftAP The third party device should be assigned an IP by the SoftAP wifi_ap_diagram ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_ap/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Home AP (Wi-Fi Access Point with internet connection) ",
							" Running the Application Open the project and launch Harmony3 configurator Configure softAP credentials as required resized_wifi_ap_MHC1 Save configurations and generate code via MHC Build and program the generated code into the hardware using its IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None The device will boot in softAP mode wifi_ap_log1 Connect to the softAP from a laptop or a Mobile Phone User may have to enter password on laptop or mobile phone for connecting to device SoftAP based on security type selected in MHC As soon as the client connects the device will print the IP address leased to it wifi_ap_log2 From DUT user can ping the connected device wifi_ap_log3 ",
							" WLAN STA This example application shows how to use the PIC32MZW1 WLAN APIs to configure the device in STA mode directly using the WLAN driver APIs ",
							" Description This application shows the various commands to be used for STA mode of PIC32MZW1 device The user can use these commands in configuring the device that it wants to connect scan operations etc ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository and click clone Path of the application within the repository is apps/wifi_sta/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_driver X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Configuring the Application ",
							" Setting up a regulatory region The available regulatory domains are - GEN USA EMEA CUST1 and CUST2 One of these regulatory domains must be selected as an active domain This selection can be done in two ways ",
							" Using MHC Figure below shows how to set the regulatory domain in MHC and the path is: TCPIP SYS_CONSOLE - TCP/IP STACK - BASIC CONFIGURATION - PIC32MZW1 mhc_regulatory ",
							" Using command wlan set regdomain reg_domain_name is the command used to set the regulatory domain (wlan set regdomain USA – sets the regulatory domain to USA) Note: User can change the regulatory domain using this command only if the current setting is \"None\" (cofigured using MHC) ",
							" Setting up the hardware The following table shows the target hardware for the application projects Project Name Board pic32mz_w1_curiosity_driver X PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter like USB UART click respectively ",
							" Running the Application Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Build and Program the application project using its IDE Console displays the initialization messages and WLAN config if already saved in NVM output ",
							" Supported Commands Command Description wlan config ssid ssid_length channel open/wpa2/wpam/wpa3/wep password Configures the SSID SSID length channel number and the security of the AP that DUT wants to connect NOTE: Valid channel numbers are in range 1-13 and 0 or 255 - scans all channels wlan connect Connects the device to the AP configured in the command “wlan config” wlan scan_options num_slots active_slot_time in ms probes_per_slot passive_scan_time in ms stop_on_first Configure scan parameters wlan scan active / passive channel Runs either a active or passive scan (as per the input) on the channel number specified for the time set in \"wlan scan_options\" Note: If no time is set default value is used wlan scan_ssidlist channel num_ssids ssid_list Scan a list of known SSID's (Maximum SSID is 4) wlan set channel_mask channel_mask Sets the channel mask for channel 1-13 Note: 1 for enable and 0 for disable wlan get rssi Gets the RSSI of current association wlan save config Stores the WLAN configurations given in command “wlan config” to flash memory On restart an attempt is made to establish a connection to the AP based on the credentials stored in flash memory wlan set regdomain reg_domain_name Sets the regulatory domain wlan get regdomain all / current Displays the regulatory domain all – request all regulatory domains; current - request current regulatory domain ",
							" Wi-Fi Station(STA) Mode This example application acts as a Wi-Fi Station(STA) to connect to Access point(AP) and exchange data ",
							" Description This application demonstrates how a user can connect to the Home AP The user would need to configure the Home AP credentials (like SSID and security items) The Wi-Fi service will use the credentials to connect to the Home AP and acquire an IP address The default application will try to establish a connection to AP \"DEMO_AP\" with WPA2 security and password as a \"password\" wifi_sta_diagram ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_sta/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Home AP (Wi-Fi Access Point with internet connection) ",
							" Running the Application Open the project and launch Harmony3 configurator Configure home AP credentials for STA Mode resized_wifi_sta_MHC1 Save configurations and generate code via MHC Build and program the generated code into the hardware using its IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None The device will connect to the Home AP and print the IP address obtained wifi_sta_log1 From the DUT(Device Under Test) user can ping the Gateway IP address wifi_sta_log2 ",
							" Web Socket Server This example application acts as a web socket server enabled enabled with wifi station mode ",
							" Description This application demonstrates how a user can enable and utilize the Web Socket Server System service The system shall run in freertos mode and the application shall come up in STA mode ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wss_server/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description pic32mz_w1_curiosity_freertos X MPLABX project for PIC32MZ W1 Curiosity Board ",
							" Setting up PIC32MZ W1 Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter Laptop (connect the ethernet cable between laptop and curiosity board) Mobile (wifi-interface) ",
							" Running the Application Open the project and launch Harmony3 configurator Configure the SSID and the credential of the for AP to be connected STAconfig Configure the port for the client connections port Save configurations and generate code via MHC Build and program the generated code into the hardware using its IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None The Board will come up in STA mode and it will get connected automatically to the configured AP: wss_server_console_wifi_connected Connect the computer also to the same AP as that of the device and run the python script wss_client/wss_client py The script will be used to send data to server The server will act as a echo server and send the data back to the client wss_client_server_commn ",
							" Microchip Information ",
							" The Microchip Website  Microchip provides online support via our website at This website is used to make files and information easily available to customers Some of the content available includes:   Product Support – Data sheets and errata application notes and sample programs design resources user’s guides and hardware support documents latest software releases and archived software  General Technical Support – Frequently Asked Questions (FAQs) technical support requests online discussion groups Microchip design partner program member listing  Business of Microchip – Product selector and ordering guides latest Microchip press releases listing of seminars and events listings of Microchip sales offices distributors and factory representatives   ",
							" Product Change Notification Service  Microchip’s product change notification service helps keep customers current on Microchip products Subscribers will receive email notification whenever there are changes updates revisions or errata related to a specified product family or development tool of interest  To register go to and follow the registration instructions  ",
							" Customer Support  Users of Microchip products can receive assistance through several channels:   Distributor or Representative  Local Sales Office  Embedded Solutions Engineer (ESE)  Technical Support   Customers should contact their distributor representative or ESE for support Local sales offices are also available to help customers A listing of sales offices and locations is included in this document  Technical support is available through the website at:  ",
							" Microchip Devices Code Protection Feature  Note the following details of the code protection feature on Microchip products:   Microchip products meet the specifications contained in their particular Microchip Data Sheet  Microchip believes that its family of products is secure when used in the intended manner within operating specifications and under normal conditions  Microchip values and aggressively protects its intellectual property rights Attempts to breach the code protection features of Microchip product is strictly prohibited and may violate the Digital Millennium Copyright Act  Neither Microchip nor any other semiconductor manufacturer can guarantee the security of its code Code protection does not mean that we are guaranteeing the product is “unbreakable” Code protection is constantly evolving Microchip is committed to continuously improving the code protection features of our products   ",
							" Legal Notice  This publication and the information herein may be used only with Microchip products including to design test and integrate Microchip products with your application Use of this information in any other manner violates these terms Information regarding device applications is provided only for your convenience and may be superseded by updates It is your responsibility to ensure that your application meets with your specifications Contact your local Microchip sales office for additional support or obtain additional support at   THIS INFORMATION IS PROVIDED BY MICROCHIP \"AS IS\" MICROCHIP MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND WHETHER EXPRESS OR IMPLIED WRITTEN OR ORAL STATUTORY OR OTHERWISE RELATED TO THE INFORMATION INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE OR WARRANTIES RELATED TO ITS CONDITION QUALITY OR PERFORMANCE  IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT SPECIAL PUNITIVE INCIDENTAL OR CONSEQUENTIAL LOSS DAMAGE COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE INFORMATION OR ITS USE HOWEVER CAUSED EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE TO THE FULLEST EXTENT ALLOWED BY LAW MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY RELATED TO THE INFORMATION OR ITS USE WILL NOT EXCEED THE AMOUNT OF FEES IF ANY THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THE INFORMATION  Use of Microchip devices in life support and/or safety applications is entirely at the buyer's risk and the buyer agrees to defend indemnify and hold harmless Microchip from any and all damages claims suits or expenses resulting from such use No licenses are conveyed implicitly or otherwise under any Microchip intellectual property rights unless otherwise stated  ",
							" Trademarks  The Microchip name and logo the Microchip logo Adaptec AVR AVR logo AVR Freaks BesTime BitCloud CryptoMemory CryptoRF dsPIC flexPWR HELDO IGLOO JukeBlox KeeLoq Kleer LANCheck LinkMD maXStylus maXTouch MediaLB megaAVR Microsemi Microsemi logo MOST MOST logo MPLAB OptoLyzer PIC picoPower PICSTART PIC32 logo PolarFire Prochip Designer QTouch SAM-BA SenGenuity SpyNIC SST SST Logo SuperFlash Symmetricom SyncServer Tachyon TimeSource tinyAVR UNI/O Vectron and XMEGA are registered trademarks of Microchip Technology Incorporated in the U S A and other countries  AgileSwitch APT ClockWorks The Embedded Control Solutions Company EtherSynch Flashtec Hyper Speed Control HyperLight Load Libero motorBench mTouch Powermite 3 Precision Edge ProASIC ProASIC Plus ProASIC Plus logo Quiet- Wire SmartFusion SyncWorld Temux TimeCesium TimeHub TimePictra TimeProvider TrueTime and ZL are registered trademarks of Microchip Technology Incorporated in the U S A  Adjacent Key Suppression AKS Analog-for-the-Digital Age Any Capacitor AnyIn AnyOut Augmented Switching BlueSky BodyCom Clockstudio CodeGuard CryptoAuthentication CryptoAutomotive CryptoCompanion CryptoController dsPICDEM dsPICDEM net Dynamic Average Matching DAM ECAN Espresso T1S EtherGREEN GridTime IdealBridge In-Circuit Serial Programming ICSP INICnet Intelligent Paralleling IntelliMOS Inter-Chip Connectivity JitterBlocker Knob-on-Display KoD maxCrypto maxView memBrain Mindi MiWi MPASM MPF MPLAB Certified logo MPLIB MPLINK MultiTRAK NetDetach Omniscient Code Generation PICDEM PICDEM net PICkit PICtail PowerSmart PureSilicon QMatrix REAL ICE Ripple Blocker RTAX RTG4 SAM-ICE Serial Quad I/O simpleMAP SimpliPHY SmartBuffer SmartHLS SMART-I S storClad SQI SuperSwitcher SuperSwitcher II Switchtec SynchroPHY Total Endurance Trusted Time TSHARC USBCheck VariSense VectorBlox VeriPHY ViewSpan WiperLock XpressConnect and ZENA are trademarks of Microchip Technology Incorporated in the U S A and other countries  SQTP is a service mark of Microchip Technology Incorporated in the U S A  The Adaptec logo Frequency on Demand Silicon Storage Technology and Symmcom are registered trademarks of Microchip Technology Inc in other countries  GestIC is a registered trademark of Microchip Technology Germany II GmbH Co KG a subsidiary of Microchip Technology Inc in other countries  All other trademarks mentioned herein are property of their respective companies  © Microchip Technology Incorporated and its subsidiaries All Rights Reserved  ISBN:  ",
							" Quality Management System   For information regarding Microchip’s Quality Management Systems please visit    ",
							" Worldwide Sales and Service          AMERICAS  ASIA/PACIFIC  ASIA/PACIFIC  EUROPE       Corporate Office  2355 West Chandler Blvd  Chandler AZ 85224-6199  Tel: 480-792-7200  Fax: 480-792-7277  Technical Support:   Web Address:   Atlanta  Duluth GA  Tel: 678-957-9614  Fax: 678-957-1455  Austin TX  Tel: 512-257-3370  Boston  Westborough MA  Tel: 774-760-0087  Fax: 774-760-0088  Chicago  Itasca IL  Tel: 630-285-0071  Fax: 630-285-0075  Dallas  Addison TX  Tel: 972-818-7423  Fax: 972-818-2924  Detroit  Novi MI  Tel: 248-848-4000  Houston TX  Tel: 281-894-5983  Indianapolis  Noblesville IN  Tel: 317-773-8323  Fax: 317-773-5453  Tel: 317-536-2380  Los Angeles  Mission Viejo CA  Tel: 949-462-9523  Fax: 949-462-9608  Tel: 951-273-7800  Raleigh NC  Tel: 919-844-7510  New York NY  Tel: 631-435-6000  San Jose CA  Tel: 408-735-9110  Tel: 408-436-4270  Canada - Toronto  Tel: 905-695-1980  Fax: 905-695-2078    Australia - Sydney  Tel: 61-2-9868-6733  China - Beijing  Tel: 86-10-8569-7000  China - Chengdu  Tel: 86-28-8665-5511  China - Chongqing  Tel: 86-23-8980-9588  China - Dongguan  Tel: 86-769-8702-9880  China - Guangzhou  Tel: 86-20-8755-8029  China - Hangzhou  Tel: 86-571-8792-8115  China - Hong Kong SAR  Tel: 852-2943-5100  China - Nanjing  Tel: 86-25-8473-2460  China - Qingdao  Tel: 86-532-8502-7355  China - Shanghai  Tel: 86-21-3326-8000  China - Shenyang  Tel: 86-24-2334-2829  China - Shenzhen  Tel: 86-755-8864-2200  China - Suzhou  Tel: 86-186-6233-1526  China - Wuhan  Tel: 86-27-5980-5300  China - Xian  Tel: 86-29-8833-7252  China - Xiamen  Tel: 86-592-2388138  China - Zhuhai  Tel: 86-756-3210040    India - Bangalore  Tel: 91-80-3090-4444  India - New Delhi  Tel: 91-11-4160-8631  India - Pune  Tel: 91-20-4121-0141  Japan - Osaka  Tel: 81-6-6152-7160  Japan - Tokyo  Tel: 81-3-6880- 3770  Korea - Daegu  Tel: 82-53-744-4301  Korea - Seoul  Tel: 82-2-554-7200  Malaysia - Kuala Lumpur  Tel: 60-3-7651-7906  Malaysia - Penang  Tel: 60-4-227-8870  Philippines - Manila  Tel: 63-2-634-9065  Singapore  Tel: 65-6334-8870  Taiwan - Hsin Chu  Tel: 886-3-577-8366  Taiwan - Kaohsiung  Tel: 886-7-213-7830  Taiwan - Taipei  Tel: 886-2-2508-8600  Thailand - Bangkok  Tel: 66-2-694-1351  Vietnam - Ho Chi Minh  Tel: 84-28-5448-2100    Austria - Wels  Tel: 43-7242-2244-39  Fax: 43-7242-2244-393  Denmark - Copenhagen  Tel: 45-4485-5910  Fax: 45-4485-2829  Finland - Espoo  Tel: 358-9-4520-820  France - Paris  Tel: 33-1-69-53-63-20  Fax: 33-1-69-30-90-79  Germany - Garching  Tel: 49-8931-9700  Germany - Haan  Tel: 49-2129-3766400  Germany - Heilbronn  Tel: 49-7131-72400  Germany - Karlsruhe  Tel: 49-721-625370  Germany - Munich  Tel: 49-89-627-144-0  Fax: 49-89-627-144-44  Germany - Rosenheim  Tel: 49-8031-354-560  Israel - Ra’anana  Tel: 972-9-744-7705  Italy - Milan  Tel: 39-0331-742611  Fax: 39-0331-466781  Italy - Padova  Tel: 39-049-7625286  Netherlands - Drunen  Tel: 31-416-690399  Fax: 31-416-690340  Norway - Trondheim  Tel: 47-72884388  Poland - Warsaw  Tel: 48-22-3325737  Romania - Bucharest  Tel: 40-21-407-87-50  Spain - Madrid  Tel: 34-91-708-08-90  Fax: 34-91-708-08-91  Sweden - Gothenberg  Tel: 46-31-704-60-40  Sweden - Stockholm  Tel: 46-8-5090-4654  UK - Wokingham  Tel: 44-118-921-5800  Fax: 44-118-921-5820       "];

